**************** ingresar valores consola ************
import teradata
vble = input()
____________________________________________________________________________________________________________________________

**************** conecion teradata ********************
udaExec = teradata.UdaExec(appName="name", version="1.0", logConsole=False)
session = udaExec.connect(method="odbc", dsn="odbc_name",  username="user", password="admin");
cursor =  session.cursor();
cnt = cursor.execute("sel top 30 * from owner.table ").rowcount;
rows = cursor.execute("sel top 30 * from owner.table").fetchall();
algo = cursor.execute("sel top 30 * from owner.table")
columns = [column[0] for column in algo.description]
df = pd.DataFrame(rows)
df.columns = columns  
____________________________________________________________________________________________________________________________

**************** conecion Impala Cloudera ********************
from impala.dbapi import connect -- instalar por anaconda Navegator

#Esta función se conecta las tablas HDFS a través de Impala
def connectImpala(impalaCfg):

    connImpala = connect(host=impalaCfg["host"], port=impalaCfg["port"])
    return connImpala


#Esta función ejecuta comandos SQL y no devuelve cursor
def setImpalaData(impalaConnection, qry):

    cursor = impalaConnection.cursor()
    cursor.execute("use external_table")
    cursor.execute("invalidate metadata")
    cursor.execute(qry)

#Esta función ejecuta comandos SQL y devuelve cursor
def getImpalaData(impalaConnection, qry):

    cursor = impalaConnection.cursor()
    cursor.execute("use external_table")
    cursor.execute("invalidate metadata")
    cursor.execute(qry)

    return cursor
____________________________________________________________________________________________________________________________

****************** Filtrar ******************
result = result[(result['var']>0.25) | (result['var']<-0.25)] 
result = result[(result['var']>0.25) & (result['var']<-0.25)] 

****************** Asignar Valores ******************
orden_df.loc[orden_df[(orden_df['visited_on']=='2018-08-08')].index,'user_id'] = 111111
____________________________________________________________________________________________________________________________

****************** Drop columns ******************
df.drop(['columnX'], axis=1)

____________________________________________________________________________________________________________________________
****************** Export ******************
df_locales.to_csv('properati_locales_1.csv', sep='~')

____________________________________________________________________________________________________________________________
****************** serch  ******************
df2[df2.Extend.str.contains('pobl. rural dispersa') == False]



